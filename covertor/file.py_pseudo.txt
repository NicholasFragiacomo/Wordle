from tkinter IMPORT font

IMPORT pygame

IMPORT sys

IMPORT random

from player IMPORT Player

IMPORT words

from pygame.locals IMPORT *

IMPORT json





DEFINE CLASS Wordle:



    DEFINE FUNCTION __init__(self):

        SET self.words TO words

        SET self.sys TO sys

        SET self.width TO 633

        SET self.height TO 900

        SET self.backgroundColor TO (50, 50, 50)

        SET self.textColor TO (255, 255, 255)

        SET self.DB TO "DB.jsons"



    '''

    Functions

    '''



    DEFINE FUNCTION draw_screen(self, caption,width,height):

        SET screen TO pygame.display.set_mode((width, height))

        pygame.display.set_caption(caption)

        screen.fill(self.backgroundColor)

        pygame.display.flip()

        pygame.display.update()

        mainClock.tick(60)

        RETURN screen



    # draws button - does not handle collision

    DEFINE FUNCTION draw_button(self, x, y, width, height, screen, button_color, text, font, text_color, outline=0):

        SET button TO pygame.Rect(x, y, width, height)

        pygame.draw.rect(screen, (button_color), button, outline)

        self.draw_text(text, font, text_color, screen, x+10, y+10)

        RETURN button



    DEFINE FUNCTION draw_text(self, text, font, color, surface, x, y):

        SET textobj TO font.render(text, 1, color)

        SET textrect TO textobj.get_rect()

        SET textrect.topleft TO (x, y)

        surface.blit(textobj, textrect)



    DEFINE FUNCTION draw_INPUTBox(self, x, y, width, height, screen, INPUTBox_color, text, font, text_color, outline=2):

        SET textobj TO font.render(text, 1, text_color)

        SET width TO max(100, textobj.get_width()+10)

        SET INPUTBox TO pygame.Rect(x, y, width, height)

        pygame.draw.rect(screen, (INPUTBox_color), INPUTBox, outline)

        SET textrect TO textobj.get_rect()

        SET textrect.topleft TO (x+5, y+5)

        screen.blit(textobj, textrect)

        RETURN INPUTBox



    DEFINE FUNCTION check_login(self, username, password,screen):

        with open("DB.json") as DB:

            SET data TO DB.read()

            SET self.DB TO json.loads(data)

            DB.close()

        IF username EQUALS '':

            RETURN 'ERROR: you forgot username'

        IF password EQUALS '':

            RETURN 'ERROR: You forgot passowrd'

        IF username and password != '':

            IF username IN self.DB:

                IF password EQUALS self.DB[username]['password']:

                    self.wordle_screen(screen)

                    # Start the wordle  

                ELSE:

                    RETURN 'password dont match what we got'

            ELSE:

                RETURN 'That username aint real'



    DEFINE FUNCTION check_registor(self, username, password,screen):



        with open("DB.json") as DB:

            SET data TO DB.read()

            SET self.DB TO json.loads(data)

            DB.close()



        IF username EQUALS '':

            RETURN 'ERROR: you forgot username'

        IF password EQUALS '':

            RETURN 'ERROR: You forgot password'

        IF username and password != '':

            IF username not IN self.DB:

                SET self.DB[username] TO {"password": password,"numGames": 0, "PercWin": 0, "GuessDist": 0}

                with open("DB.json", 'w') as data:

                    json.dump(self.DB, data)

                    data.close()

                    self.login_screen(screen)

            ELSE:

                RETURN 'Username taken'



    ''' 

    Screens

    '''



    DEFINE FUNCTION start_screen(self):



        SET screen TO self.draw_screen('Wordle',self.width,self.height)



        SET running TO True

        WHILE running:



            SET font TO pygame.font.SysFont(None, 30)

            SET mx, my TO pygame.mouse.get_pos()



            screen.fill(self.backgroundColor)

            self.draw_text('Wordle', font, self.textColor, screen, 250, 40)



            SET login_button TO self.draw_button(250, 100, 100, 50, screen, (255, 0, 0), 'Login', font, self.textColor)

            SET register_button TO self.draw_button(250, 300, 100, 50, screen, (255, 0, 0), 'Register', font, self.textColor)



            # Button 1 collision

            IF login_button.collidepoint((mx, my)):

                IF click:

                    self.login_screen(screen)

            IF register_button.collidepoint((mx, my)):

                IF click:

                    self.registor_screen(screen)



            # Events

            SET click TO False

            FOR event IN pygame.event.get():

                IF event.type EQUALS pygame.QUIT:

                    SET running TO False

                IF event.type EQUALS MOUSEBUTTONDOWN:

                    IF event.button EQUALS 1:

                        SET click TO True



            pygame.display.update()

            mainClock.tick(60)



    DEFINE FUNCTION login_screen(self, screen):

        SET username TO ''

        SET password TO ''

        SET error_message TO ''

        SET click1 TO False

        SET click2 TO False

        SET running TO True

        WHILE running:



            SET header_font TO pygame.font.SysFont(None, 50)

            SET text_font TO pygame.font.SysFont(None, 30)

            SET INPUT_font TO pygame.font.SysFont(None, 20)

            SET mx, my TO pygame.mouse.get_pos()



            screen.fill(self.backgroundColor)

            self.draw_text('Login', header_font,self.textColor, screen, 20, 20)



            self.draw_text(error_message,text_font,(255,0,0),screen,200,200)



            self.draw_text("Username:", text_font,self.textColor, screen, 250, 300)

            SET name_box TO self.draw_INPUTBox(250, 330, 100, 25, screen, (255, 255, 255), username, INPUT_font, self.textColor, 2)



            self.draw_text("Password:", text_font,self.textColor, screen, 250, 400)

            SET password_box TO self.draw_INPUTBox(250, 430, 100, 25, screen, (255, 255, 255), password, INPUT_font, self.textColor, 2)



            SET enter_button TO self.draw_button(250, 700, 100, 50, screen, (255, 0, 0), 'Enter', text_font, self.textColor)



            SET back_button TO self.draw_button(250, 800, 100, 50, screen, (255, 0, 0), 'Back', text_font, self.textColor)



            # Events

            FOR event IN pygame.event.get():



                IF event.type EQUALS pygame.QUIT:

                    self.exit_screen()



                IF event.type EQUALS MOUSEBUTTONDOWN:

                    IF name_box.collidepoint(event.pos):

                        SET click1 TO True

                    ELSE:

                        SET click1 TO False

                    IF password_box.collidepoint(event.pos):

                        SET click2 TO True

                    ELSE:

                        SET click2 TO False

                    IF back_button.collidepoint((mx, my)):

                        SET running TO False

                    IF enter_button.collidepoint((mx, my)):

                        SET error_message TO ''

                        SET error_message  TO self.check_login(username, password,screen)



                IF event.type EQUALS pygame.KEYDOWN:

                    IF click1 EQUALS True:

                        IF event.key EQUALS pygame.K_BACKSPACE:

                            SET username TO username[:-1]

                        ELSEIF event.key EQUALS pygame.K_RETURN:

                            SET username TO username  

                        ELSE:

                            username += event.unicode

                    IF click2 EQUALS True:

                        IF event.key EQUALS pygame.K_BACKSPACE:

                            SET password TO password[:-1]

                        ELSEIF event.key EQUALS pygame.K_RETURN:

                            SET password TO password

                        ELSE:

                            password += event.unicode

                    IF event.key EQUALS pygame.K_RETURN:

                        SET error_message TO ''

                        SET error_message TO self.check_login(username, password,screen)



            pygame.display.update()

            mainClock.tick(60)



    DEFINE FUNCTION registor_screen(self, screen):

        SET username TO ''

        SET password TO ''

        SET error_message TO ''

        SET click1 TO False

        SET click2 TO False

        SET running TO True

        WHILE running:



            SET header_font TO pygame.font.SysFont(None, 50)

            SET text_font TO pygame.font.SysFont(None, 30)

            SET INPUT_font TO pygame.font.SysFont(None, 20)

            SET mx, my TO pygame.mouse.get_pos()



            screen.fill(self.backgroundColor)

            self.draw_text('Register', header_font,self.textColor, screen, 20, 20)



            self.draw_text(error_message,text_font,(255,0,0),screen,200,200)



            self.draw_text("Username:", text_font,self.textColor, screen, 250, 300)

            SET name_box TO self.draw_INPUTBox(250, 330, 100, 25, screen, (255, 255, 255), username, INPUT_font, self.textColor, 2)



            self.draw_text("Password:", text_font,self.textColor, screen, 250, 400)

            SET password_box TO self.draw_INPUTBox(250, 430, 100, 25, screen, (255, 255, 255), password, INPUT_font, self.textColor, 2)



            SET enter_button TO self.draw_button(250, 700, 100, 50, screen, (255, 0, 0), 'Enter', text_font, self.textColor)



            SET back_button TO self.draw_button(250, 800, 100, 50, screen, (255, 0, 0), 'Back', text_font, self.textColor)



            # Events

            FOR event IN pygame.event.get():



                IF event.type EQUALS pygame.QUIT:

                    self.exit_screen()



                IF event.type EQUALS MOUSEBUTTONDOWN:

                    IF name_box.collidepoint(event.pos):

                        SET click1 TO True

                    ELSE:

                        SET click1 TO False

                    IF password_box.collidepoint(event.pos):

                        SET click2 TO True

                    ELSE:

                        SET click2 TO False

                    IF back_button.collidepoint((mx, my)):

                        SET running TO False

                    IF enter_button.collidepoint((mx, my)):

                        SET error_message TO ''

                        SET error_message TO self.check_registor(username, password,screen)



                IF event.type EQUALS pygame.KEYDOWN:

                    IF click1 EQUALS True:

                        IF event.key EQUALS pygame.K_BACKSPACE:

                            SET username TO username[:-1]

                        ELSEIF event.key EQUALS pygame.K_RETURN:

                            SET username TO username  

                        ELSE:

                            username += event.unicode

                    IF click2 EQUALS True:

                        IF event.key EQUALS pygame.K_BACKSPACE:

                            SET password TO password[:-1]

                        ELSEIF event.key EQUALS pygame.K_RETURN:

                            SET password TO password

                        ELSE:

                            password += event.unicode

                    IF event.key EQUALS pygame.K_RETURN:

                        SET error_message TO ''

                        SET error_message TO self.check_registor(username, password,screen)



            pygame.display.update()

            mainClock.tick(60)



        DEFINE FUNCTION wordle_screen(self):

            SET username TO ''

            SET password TO ''

            SET error_message TO ''

            SET click1 TO False

            SET click2 TO False

            SET running TO True

            WHILE running:



                SET header_font TO pygame.font.SysFont(None, 50)

                SET text_font TO pygame.font.SysFont(None, 30)

                SET INPUT_font TO pygame.font.SysFont(None, 20)

                SET mx, my TO pygame.mouse.get_pos()



                screen.fill(self.backgroundColor)

                self.draw_text('Wordle', header_font,self.textColor, screen, 20, 20)



                self.draw_text(error_message,text_font,(255,0,0),screen,200,200)



                self.draw_text("Guess", text_font,self.textColor, screen, 250, 300)

                SET guess_box TO self.draw_INPUTBox(250, 330, 100, 25, screen, (255, 255, 255), username, INPUT_font, self.textColor, 2)



                

                SET enter_button TO self.draw_button(250, 700, 100, 50, screen, (255, 0, 0), 'Enter', text_font, self.textColor)



                SET back_button TO self.draw_button(250, 800, 100, 50, screen, (255, 0, 0), 'Back', text_font, self.textColor)



                # Events

                FOR event IN pygame.event.get():



                    IF event.type EQUALS pygame.QUIT:

                        self.exit_screen()



                    IF event.type EQUALS MOUSEBUTTONDOWN:

                        IF guess_box.collidepoint(event.pos):

                            SET click1 TO True

                        ELSE:

                            SET click1 TO False

                        IF back_button.collidepoint((mx, my)):

                            SET running TO False

                        IF enter_button.collidepoint((mx, my)):

                            SET error_message TO ''

                            #check guess

                            SET #error_message  TO self.check_login(username, password,screen)



                    IF event.type EQUALS pygame.KEYDOWN:

                        IF click1 EQUALS True:

                            IF event.key EQUALS pygame.K_BACKSPACE:

                                SET username TO username[:-1]

                            ELSEIF event.key EQUALS pygame.K_RETURN:

                                SET username TO username  

                            ELSE:

                                username += event.unicode

                        IF click2 EQUALS True:

                            IF event.key EQUALS pygame.K_BACKSPACE:

                                SET password TO password[:-1]

                            ELSEIF event.key EQUALS pygame.K_RETURN:

                                SET password TO password

                            ELSE:

                                password += event.unicode

                        IF event.key EQUALS pygame.K_RETURN:

                            SET error_message TO ''

                            #check guess

                            SET #error_message TO self.check_login(username, password,screen)



                pygame.display.update()

                mainClock.tick(60)



    DEFINE FUNCTION exit_screen(self):

        pygame.quit()

        sys.exit()





'''

Main

'''





DEFINE FUNCTION main():

    SET W TO Wordle()

    pygame.init()



    global mainClock

    SET mainClock TO pygame.time.Clock()



    W.start_screen()





IF __name__ EQUALS "__main__":

    main()

